plugins {
    id 'java-gradle-plugin'
    id 'maven-publish'
    id 'idea'
    id "com.gradle.plugin-publish" version "1.3.0"
}

group 'org.jpos'
version '0.0.12'

def isSnapshot = version.contains("SNAPSHOT")

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
    implementation 'org.eclipse.jgit:org.eclipse.jgit:6.3.0.202209071007-r'
}


gradlePlugin {
    website = 'http://jpos.org'
    vcsUrl = 'https://github.com/jpos/jpos-gradle-plugin'
    plugins {
        jposapp {
            id = 'org.jpos.jposapp'
            displayName = 'jPOS App Gradle Plugin'
            description = 'Implements jPOS app conventions'
            implementationClass = 'org.jpos.gradle.JPOSPlugin'
            tags.set(['jpos', 'iso8583'])
        }
    }
}

sourceSets {
    functionalTest {
    }
}

configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)

if (project.hasProperty("lint")) {
    // gradle -Plint ...
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:preview" << "-Xlint:unchecked" << "-Xlint:deprecation"
    }
}

tasks.register('functionalTest', Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    useJUnitPlatform()
}

gradlePlugin.testSourceSets(sourceSets.functionalTest)

tasks.named('check') {
    dependsOn(tasks.functionalTest)
}

tasks.named('test') {
    useJUnitPlatform()
}

publishing {
    repositories {
	if (isSnapshot) {
	    maven {
		mavenLocal();
		url = 'file:///opt/local/maven'
	    }
        }
    }
}


