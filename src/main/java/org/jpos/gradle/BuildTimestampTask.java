/*
 * jPOS Project [http://jpos.org]
 * Copyright (C) 2000-2024 jPOS Software SRL
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package org.jpos.gradle;

import org.gradle.api.DefaultTask;
import org.gradle.api.tasks.OutputFile;
import org.gradle.api.tasks.TaskAction;
import org.gradle.work.DisableCachingByDefault;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.time.Instant;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.Properties;

@DisableCachingByDefault(because = "We want to set buildTimestamp each time")
class BuildTimestampTask extends DefaultTask {
    @OutputFile
    File outputFile;
    String projectName;
    Object projectVersion;

    public BuildTimestampTask() { }

    public File getOutputFile() {
        return outputFile;
    }

    public void setProjectName(String projectName) {
        this.projectName = projectName;
    }

    public void setProjectVersion(Object projectVersion) {
        this.projectVersion = projectVersion;
    }

    public void setOutputFile(File outputFile) {
        this.outputFile = outputFile;
    }

    @TaskAction
    public void writeFile() throws IOException {
        new File(outputFile.getParent()).mkdirs();
        Properties props=new Properties();
        props.put("projectName", projectName);
        props.put("version", projectVersion);
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss z")
          .withZone(ZoneId.systemDefault());
        props.put("buildTimestamp", formatter.format(Instant.now()));
        props.store(new FileOutputStream(outputFile), "Generated by BuildTimestampTask");
    }
}
